import logging
from keep_alive import keep_alive
from telegram import InputFile
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
(CHOOSING_ACTION, ENTER_NAME, CHOOSE_GENRE, ENTER_OTHER_GENRE, 
 ENTER_DURATION, ENTER_REQUIREMENTS, ENTER_CONTACT) = range(7)

# chat_id –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞—è–≤–∫–∏
GROUP_CHAT_ID = -1002542936379  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π chat_id

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    with open("welcome.jpg", "rb") as photo:
        await update.message.reply_photo(
            photo=InputFile(photo),
            caption="üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã —Ö–æ—á–µ—à—å –≤—ã—Å—Ç—É–ø–∏—Ç—å –Ω–∞ ¬´–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–æ–º –∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫–µ¬ª? üé≠‚ú®\n"
                    "–ó–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞—è–≤–∫—É, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π!",
            reply_markup=reply_markup
        )

    return CHOOSING_ACTION

# –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
async def more_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üìå –ö–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫ ‚Äì —ç—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä, –≥–¥–µ –≤—ã—Å—Ç—É–ø–∞—é—Ç –º—É–∑—ã–∫–∞–Ω—Ç—ã, –ø–æ—ç—Ç—ã, –∞–∫—Ç—ë—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –∞—Ä—Ç–∏—Å—Ç—ã. "
        "–í—Å—ë –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —É—é—Ç–Ω–æ–º –ª–æ—Ñ—Ç–µ, –∞ –≥–ª–∞–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ ‚Äì –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã.\n"
        "üöÄ –ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤(–∞) –≤—ã—Å—Ç—É–ø–∏—Ç—å ‚Äì –Ω–∞–∂–∏–º–∞–π ¬´–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª!",
        reply_markup=reply_markup
    )
    return CHOOSING_ACTION

# –ù–∞—á–∞–ª–æ –∑–∞—è–≤–∫–∏
async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.\n\n1. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ENTER_NAME

# –ò–º—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text

    keyboard = [
        [KeyboardButton("–í–æ–∫–∞–ª üé§"), KeyboardButton("–ê–≤—Ç–æ—Ä—Å–∫–∞—è –º—É–∑—ã–∫–∞ üé∏")],
        [KeyboardButton("–ü–æ—ç–∑–∏—è üìñ"), KeyboardButton("–¢–µ–∞—Ç—Ä üé≠")],
        [KeyboardButton("–î—Ä—É–≥–æ–µ üìù")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text("2. –í –∫–∞–∫–æ–º –∂–∞–Ω—Ä–µ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã—Å—Ç—É–ø–∏—Ç—å?", reply_markup=reply_markup)
    return CHOOSE_GENRE

# –ñ–∞–Ω—Ä
async def get_genre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    genre = update.message.text
    context.user_data['genre'] = genre

    if genre == "–î—Ä—É–≥–æ–µ üìù":
        await update.message.reply_text("üëâ –ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å!")
        return ENTER_OTHER_GENRE

    await update.message.reply_text("3. –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –∑–∞–π–º—ë—Ç —Ç–≤–æ—ë –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ?")
    return ENTER_DURATION

# –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
async def get_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['duration'] = update.message.text
    await update.message.reply_text("4. –ù—É–∂–Ω—ã –ª–∏ —Ç–µ–±–µ –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è? (–ú–∏–∫—Ä–æ—Ñ–æ–Ω, –∫–æ–ª–æ–Ω–∫–∞ –∏ —Ç.–¥.)")
    return ENTER_REQUIREMENTS

# –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è
async def get_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['requirements'] = update.message.text
    await update.message.reply_text("5. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram –¥–ª—è —Å–≤—è–∑–∏")
    return ENTER_CONTACT

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def complete_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['contact'] = update.message.text

    msg = (
        "üé≠ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫:\n\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üé® –ñ–∞–Ω—Ä: {context.user_data['genre']}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {context.user_data['duration']}\n"
        f"üéö –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è: {context.user_data['requirements']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['contact']}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
    try:
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [KeyboardButton("–°–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üìå –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
        "üé≠ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å —Ç–æ–±–æ–π. –ê –ø–æ–∫–∞ ‚Äì —Å–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –≥–æ—Ç–æ–≤—å —Å–≤–æ—ë –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ!",
        reply_markup=reply_markup
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    share_keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton(
            text="üì£ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏",
            switch_inline_query="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–æ–º—É –∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫—É! üé≠‚ú® https://t.me/peterburgkvartirnik"
        )
    ]])

    await update.message.reply_text(
        "üéâ –†–∞—Å—Å–∫–∞–∂–∏ –¥—Ä—É–∑—å—è–º –æ –∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫–µ!",
        reply_markup=share_keyboard
    )
    await update.message.reply_text("–°–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://t.me/peterburgkvartirnik")

    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:
    application = import os

application = Application.builder().token(os.getenv("—Ö—É–π")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_ACTION: [
                MessageHandler(filters.Regex("^–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$"), start_application),
                MessageHandler(filters.Regex("^–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ$"), more_info),
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), start)
            ],
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CHOOSE_GENRE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_genre)],
            ENTER_OTHER_GENRE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_duration)],
            ENTER_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_duration)],
            ENTER_REQUIREMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_requirements)],
            ENTER_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, complete_application)],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    keep_alive()
    application.run_polling()

if __name__ == "__main__":
    main()
